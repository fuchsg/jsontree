#!/usr/bin/env python3

# Requires: pip3 install textual

import argparse
parser = argparse.ArgumentParser(description="JSON data structure explorer.")
parser.add_argument("filename")
args = parser.parse_args()

import json
from pathlib import Path

from rich.text import Text

from textual.app import App, ComposeResult
from textual.widgets import Header, Footer, Tree
from textual.widgets.tree import TreeNode

class TreeApp(App):

    BINDINGS = [
        ("t", "toggle_tree", "Toggle tree"),
        ("q", "quit", "Quit"),
    ]

    def compose(self) -> ComposeResult:
        yield Header()
        yield Footer()
        yield Tree("Root")

    @classmethod
    def add_json(cls, node: TreeNode, json_data: object) -> None:
        """Adds JSON data to a node.

        Args:
            node (TreeNode): A Tree node.
            json_data (object): An object decoded from JSON.
        """

        from rich.highlighter import ReprHighlighter

        highlighter = ReprHighlighter()

        def add_node(name: str, node: TreeNode, data: object) -> None:
            """Adds a node to the tree.

            Args:
                name (str): Name of the node.
                node (TreeNode): Parent node.
                data (object): Data associated with the node.
            """
            if isinstance(data, dict):
                node._label = Text(f"{{}} {name}")
                for key, value in data.items():
                    new_node = node.add("")
                    add_node(key, new_node, value)
            elif isinstance(data, list):
                node._label = Text(f"[] {name}")
                for index, value in enumerate(data):
                    new_node = node.add("")
                    add_node(str(index), new_node, value)
            else:
                node._allow_expand = False
                if name:
                    label = Text.assemble(
                        Text.from_markup(f"[b]{name}[/b]="), highlighter(repr(data))
                    )
                else:
                    label = Text(repr(data))
                node._label = label

        add_node(args.filename, node, json_data)

    def on_mount(self) -> None:
        # Load JSON when the app starts.
        if (args.filename):
          with open(args.filename) as data_file:
            self.json_data = json.load(data_file)
        else:
            self.json_data = json_data

        tree = self.query_one(Tree)
        self.set_focus(tree)
        tree.show_root = not tree.show_root
        json_node = tree.root.add("JSON")
        self.add_json(json_node, self.json_data)

        # Pre-expand first 2 levels of children to avoid empty window at startup
        for child_1 in tree.root.children:
          child_1.expand()
          for child_2 in child_1.children:
            child_2.expand()
        tree.focus()

    def action_toggle_tree(self) -> None:
        # Toggle node expansion for the whole tree
        tree = self.query_one(Tree)
        if (tree.root.is_expanded):
          tree.root.collapse_all()
          for child_1 in tree.root.children:
            child_1.expand()
            for child_2 in child_1.children:
              child_2.expand()
        else:
          tree.root.expand_all()

    def action_quit(self) -> None:
        exit()

if __name__ == "__main__":
    app = TreeApp()
    app.run()
